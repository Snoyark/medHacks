{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pagesMedicare","App","useState","dict","setDict","searchVal","setSearchVal","resp","setResp","info","setInfo","number","Object","keys","length","fetch","method","headers","Accept","Authorization","btoa","then","response","json","files","content","CSV","d","i","setContent","style","display","width","height","verticalAlign","backgroundColor","padding","fontFamily","color","fontWeight","fontSize","justifyContent","float","className","alignItems","textAlign","paddingTop","paddingLeft","id","borderRadius","title","placeholder","onChange","t","document","getElementById","value","onKeyPress","event","key","console","log","val","ind","indexOf","substring","list","arr","ret","push","getArray","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7d13fe9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport * as CSV from 'csv-string';\n\nconst pagesMedicare = ['622992ae62d074eb6a02c23654c911d1', '849ad6f2240f259ec8dec1bfdd4af4e5', '06f01b110455ddbc908b9be164f33f56', '092fbc2c30c4d31cbd6c1b73624df3b6']\n\nfunction getPage(number) {\n  const prom = fetch(`https://api.github.com/gists/${pagesMedicare[number]}`,\n    {\n      method: 'GET',\n      headers: {\n        Accept: 'application/vnd.github.v3.raw',\n        Authorization: btoa(\"Snoyark: 69c348c3b8fc00b3c9fa9253d84734d42734be58\")\n      }\n    }\n  ).then(response => {\n    return response.json()\n    // .files[`page${number}.csv`].content;\n  }).then(response => {\n    return response.files[`page${number}.csv`].content\n  }).then(response => CSV.parse(response));\n  return prom;\n}\n\nconst App = () => {\n  const [dict, setDict] = useState({});\n  const [searchVal, setSearchVal] = useState(\"\");\n  const [resp, setResp] = useState([]);\n  const [info, setInfo] = useState(\"\")\n  const [dummy, setDummy] = useState(\"\");\n  const setContent = () => {\n    if (Object.keys(dict).length !== 0 && resp.length !== 0) {\n      return;\n    }\n    getPage(3).then(response => {\n      let d = {}\n      setResp(response)\n      for (let i = 0; i < response.length - 1; i += 1) {\n        d[response[i][1]] = response[i + 1][0]\n        d[response[i][2]] = response[i + 1][0]\n      }\n      setDict(d);\n    })\n  }\n\n  const getArray = () => {\n    const arr = Object.keys(dict);\n    const ret = []\n    for (let i = 6; i < arr.length; i += 1) {\n      // ret.push({value: arr[i].toLowerCase(), label: arr[i]})\n      ret.push(<option value={arr[i]}/>)\n    }\n    return ret\n  }\n  setContent();\n  return (\n    <div style={{ display: 'display-flex' }}>\n      <div style={{\n        width: '100%',\n        height: 130,\n        verticalAlign: 'top',\n        backgroundColor: '#4169E1',\n        padding: 10,\n        fontFamily: 'Sans-Serif',\n      }}>\n        <div>\n          <span style={{\n            color: 'white',\n            fontWeight: 'bold',\n            fontSize: 80,\n            verticalAlign: 'middle',\n            }}\n            >\n              Pharma Veritas\n          </span>\n          <span style={{\n            justifyContent: \"flex-end\",\n            padding: 40,\n            float: 'right', \n            fontSize : 35,\n            color: 'white',\n          }}\n          className=\"tooltip\"\n          >\n            <span className=\"tooltiptext\">\n              This was created by a group of students with varying backgrounds who wanted to help\n              a group of people often looked over in the speed of technological innovation who could\n              use help in their health livelihoods.\n            </span>\n            About\n          </span>\n          <span style={{\n            justifyContent: \"flex-end\",\n            padding: 40,\n            float: 'right', \n            fontSize : 35,\n            color: 'white',\n          }}\n          className=\"tooltip\"\n          >\n            <span className=\"tooltiptext\">\n              Enter any medicine you may be taking, and we'll see if we can help you learn more about them.\n            </span>\n            Help\n          </span>\n        </div>\n        <div style={{\n          fontSize: 28,\n          color: 'rgb(225, 225, 225)',\n          fontFamily: 'Serif',\n        }}>\n          Verity regarding medicine.\n        </div>\n      </div>\n      {/* Area between the header and the search bar */}\n      <div style={{\n        width: '100%',\n        height: 200,\n        alignItems: 'middle',\n        fontSize: 45,\n        textAlign: \"center\",\n        paddingTop: 60,\n      }}>\n        Type in the name of the generic or brand name of your drug below to find out more information.\n      </div>\n      <div style={{justifyContent: 'center', paddingLeft: '5%'}}>\n        <input\n          id=\"in\"\n          style={{\n            width: '90%',\n            height: 50,\n            padding: 5,\n            justifyContent: 'center',\n            borderRadius: 4,\n            fontSize: 25,\n            textAlign: 'center'\n          }}\n          title=\"What are you waiting for?\"\n          placeholder=\"Search your favorite medicines (Case/Space sensitive)!\"\n          onChange={(t) => {\n            if (t !== '') {\n              setSearchVal(document.getElementById(\"in\").value)\n            }\n          }}\n          onKeyPress={event => {\n            if (event.key === 'Enter') {\n              console.log(searchVal)\n              if (searchVal in dict) {\n                let val = `${resp[dict[searchVal]][3]}`\n                const ind = val.indexOf('NOTE')\n                val = val.substring(0, ind)\n                setInfo(val)\n                setSearchVal(\"\");\n              } else {\n                setSearchVal(\"\");\n                setInfo('No medication could be found by that name.')\n              }\n            }\n          }}\n          list=\"meds\"\n        />\n          <datalist id=\"meds\">\n            {getArray()}\n          </datalist>\n      </div>\n      <div style={{\n        color: 'rgb(120, 120, 120)',\n        fontSize: 35,\n        textAlign: 'center',\n        padding: 40\n      }}>\n        {(Object.keys(dict).length !== 0) && info}\n        <hr />\n        {(Object.keys(dict).length !== 0) && (info !== \"\") && `\\nNOTE: This is a summary and does NOT have all possible information about this product. This information does not assure that this product is safe, effective, or appropriate for you. This information is not individual medical advice and does not substitute for the advice of your health care professional. Always ask your health care professional for complete information about this product and your specific health needs.`}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}